/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 12.02.2023 17:45:52

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 17584;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,8000 } };
const TfArray<1, float> quant0_scale = { 1, { 0.002190563827753067, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 100, 80, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 100, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*80] = { 
  /* [0][0][][] */ -65,27,-66,49,16,-72,32,52,55,-50,-14,35,-20,78,-28,-74,-28,-10,-51,-45,-70,36,-11,27,74,92,-87,3,3,-43,-46,23,-50,-18,72,36,-71,-89,-4,-84,79,-17,50,-39,-5,60,52,-32,16,-19,75,30,-59,-36,-18,82,-34,-68,20,-15,-79,-28,54,-40,-1,-93,-75,-19,22,18,-34,69,79,-9,-37,-55,-39,-12,-46,-48, 17,-38,-8,49,53,1,61,22,-33,-49,-45,-39,-33,45,-10,24,-74,-69,-70,91,59,44,23,-71,29,71,-61,-50,-23,66,-58,-11,38,-4,-37,-20,82,17,66,-37,-39,-89,44,28,36,43,-127,70,-79,-31,-73,12,-40,-48,-67,12,-50,-28,-19,59,4,-79,-72,-67,-4,-64,51,5,-27,-12,10,-15,-86,-26,-51,-45,-90,-61,-51,-52, -41,74,-21,-6,-26,8,-87,-13,-57,74,-2,-31,-20,-84,-71,75,33,-34,-30,-96,-8,39,57,18,-35,-14,-61,21,33,60,53,32,70,22,26,-7,68,8,81,35,57,-80,4,43,-8,11,21,17,-53,-11,-6,27,0,-3,55,-33,7,-26,-40,-19,-43,8,34,75,-52,29,69,-81,-6,7,12,-83,39,-103,19,1,-64,-107,0,17, 
  /* [1][0][][] */ 3,-1,-10,-13,65,73,2,-22,-4,15,5,53,117,8,-6,14,-2,4,104,73,-18,11,-13,-19,95,37,1,2,-14,20,20,-1,5,-11,-9,-13,12,56,4,5,-8,66,55,8,-12,16,72,2,19,18,-2,29,29,-21,-8,-18,48,41,-7,-9,35,31,20,10,31,29,-8,-16,14,3,-12,20,12,10,-10,18,-15,24,22,34, -22,-1,4,20,-23,-21,-3,-20,14,11,-7,-3,59,6,-13,16,-1,-19,26,-21,-11,-16,-18,6,-1,-59,12,-17,12,-6,-82,-124,22,14,2,6,-115,23,14,-2,-4,2,-10,-2,21,14,-18,-110,1,-14,-21,-115,-70,-10,-5,21,-44,-22,14,13,-64,-88,-2,-9,-49,-58,12,9,-51,-127,19,-13,-100,-102,1,-13,-81,-52,1,-70, -8,20,19,0,37,82,21,-8,9,15,14,90,85,-17,20,-23,2,17,78,-50,-6,-12,-22,-21,-24,-53,9,11,-21,-17,-82,-25,-19,23,5,13,-31,17,10,23,17,3,37,5,-12,-19,13,-31,1,-3,-10,-43,-13,21,12,-18,-35,-80,6,-13,-108,-71,-11,-6,-56,4,-19,2,-9,-70,-19,13,-102,-23,-4,-23,-40,11,1,-14, 
  /* [2][0][][] */ 0,-15,-13,17,-49,-109,-18,15,-7,-9,0,-75,-54,6,-7,-18,6,0,-69,5,-12,3,-5,10,-14,-30,1,-16,-15,-3,-38,-63,14,-14,-5,10,-69,-18,5,-3,-13,-21,-30,9,-9,16,-28,-68,-7,-11,13,-62,17,-2,8,-10,18,-11,-15,7,-14,-27,-12,0,-18,17,-14,14,19,7,-3,7,14,-21,1,-13,3,23,-6,12, -17,-18,16,-2,-39,-74,17,8,-8,-19,4,-68,1,13,2,-9,-12,4,-15,-95,16,-8,-7,1,-104,-57,15,6,-10,-17,-61,1,18,-1,0,13,-2,-80,16,-19,19,-73,-38,9,2,18,-30,-24,2,1,3,-41,-52,-7,9,12,-27,-36,9,-9,-32,-9,3,9,-10,6,-18,-18,3,-12,7,-11,-25,-6,12,-17,10,17,-6,-7, 9,-14,14,-16,-92,-107,16,-15,-5,17,10,-116,-14,-3,-17,14,-8,6,10,17,-7,-11,-1,8,21,-14,6,17,-11,5,-21,-127,-11,5,-2,-14,-102,-36,4,-1,5,-33,-59,3,-18,-14,-55,-98,0,9,16,-103,-46,-10,11,-2,-17,-8,15,10,-22,0,-9,1,-19,-16,13,-10,-13,1,-18,6,-14,24,-15,19,13,16,3,11, 
  /* [3][0][][] */ -21,18,-6,21,95,70,-1,15,-5,7,6,90,42,20,18,-15,5,0,18,-9,3,16,19,-17,18,21,-5,-5,-11,10,24,32,-1,-9,-6,2,17,-4,-2,-16,-6,-19,-11,-17,14,20,0,21,-6,15,-21,25,-49,-17,-9,21,-43,-47,-4,-17,-68,-33,14,-18,-54,-80,-4,0,-75,-86,16,-13,-112,-53,2,0,-86,-83,18,-80, 1,-14,21,-11,85,56,15,7,7,-7,5,78,64,5,13,-16,17,11,54,58,1,-9,-17,-19,29,2,-21,20,-14,-2,-9,-1,-12,16,12,16,-4,-8,17,20,12,-6,-37,1,14,18,-33,-1,7,12,-8,-3,-42,19,7,-19,-15,-75,2,12,-56,-43,18,19,-69,-51,-20,3,-77,-98,-20,-5,-76,-64,-11,-5,-62,-69,16,-83, -12,2,-12,7,98,48,15,20,-15,-19,-20,62,-3,-13,-6,10,-14,16,12,-10,0,0,2,20,-17,27,-7,-18,10,16,6,37,11,1,-9,-10,39,43,16,21,12,32,24,18,20,-12,33,-13,-2,-11,11,-4,-56,7,-20,16,-23,-45,-17,11,-25,-69,-19,19,-40,-70,-1,-6,-87,-107,-8,6,-95,-127,-8,13,-126,-60,-13,-72, 
  /* [4][0][][] */ 1,24,-45,26,12,-76,11,8,-62,11,20,12,-31,30,0,-49,17,-47,-49,-74,12,-9,10,-51,-24,-21,-5,-32,61,-52,-46,-82,57,-25,-58,-55,20,27,-40,31,-32,-4,-70,-11,31,15,-111,-80,0,-8,10,-99,-109,-18,-58,-25,7,-96,-34,48,-56,-107,-38,57,-29,1,-47,26,-40,-18,59,50,-48,-36,60,4,7,-92,24,-47, -32,-21,56,26,-23,-92,-55,-27,20,18,37,-93,-16,7,-21,-47,-48,-6,-43,-43,27,-15,63,-53,-6,-109,11,33,43,-48,-127,-55,19,4,20,53,-11,-23,31,45,34,-64,-44,54,16,27,-74,3,-48,51,12,-69,29,-45,18,41,30,7,0,9,32,19,-12,22,-35,5,38,2,-3,-48,-46,-48,-37,35,-22,-21,10,-29,64,49, 62,-16,-17,56,-55,-38,57,29,9,22,-13,6,-104,-65,63,-26,-61,-38,-98,-85,-8,17,5,63,-46,-23,-53,60,59,-60,-16,-36,47,35,16,-5,-71,1,-10,63,-15,-31,14,-16,63,37,41,34,-22,-61,40,-46,-2,-6,31,-10,-61,-1,23,-44,-68,-40,45,-13,-47,-72,51,-49,-39,52,23,-49,32,-16,36,59,6,-29,26,-40, 
  /* [5][0][][] */ 11,2,5,4,81,30,-6,-8,11,-19,0,37,26,-1,-9,5,11,18,-3,41,0,7,14,-4,27,50,21,-10,-7,9,81,69,-19,-1,-7,16,59,21,-9,-6,-11,17,6,20,-4,15,30,29,-18,18,-11,-3,-33,-14,-6,-4,-12,-58,18,-18,-61,-73,-12,-16,-54,-61,12,10,-78,-30,12,19,-51,-93,11,10,-127,-81,7,-97, 1,6,-4,-16,95,53,15,19,19,-20,-2,79,39,16,4,22,13,-11,43,64,-1,-7,4,-9,74,48,15,1,13,17,23,28,-20,-17,20,-20,29,28,-2,19,-3,29,-29,16,-16,-4,-31,-26,22,15,-7,-50,-92,21,20,-4,-67,-83,-21,-15,-74,-80,22,-9,-90,-49,-20,-16,-57,-77,-5,-1,-57,-70,-6,18,-41,-77,-14,-74, 5,0,-11,18,103,79,8,-15,-12,-9,4,43,-1,9,5,-21,17,11,-5,51,-11,0,-12,4,16,55,20,3,0,17,71,59,-19,15,-7,8,44,12,-14,-21,-20,37,11,-17,-22,6,36,15,6,-22,22,50,-40,11,-1,-7,-23,-65,-8,-19,-98,-76,-20,2,-77,-48,-5,-1,-49,-124,-20,-14,-122,-99,18,-16,-73,-67,-4,-97, 
  /* [6][0][][] */ -10,-8,-13,-11,4,16,14,6,-10,12,-5,24,37,-5,5,4,7,-3,34,11,-6,1,1,9,17,-56,-11,-3,12,-9,-58,-127,-3,11,-1,12,-115,-24,-10,9,-3,-20,-4,8,-2,4,-6,-60,-1,-2,3,-44,-8,1,-12,13,-14,-24,-12,13,-24,-94,11,4,-113,-55,-10,-7,-41,-45,3,-6,-49,-67,-1,6,-54,-55,-2,-60, -9,10,5,0,30,38,11,4,5,9,3,46,38,2,-2,1,-10,-9,39,5,11,0,-2,1,-16,-25,9,-1,12,-5,-15,-12,1,9,11,10,2,-20,8,6,7,-7,-10,-13,1,5,-10,13,-6,-11,9,21,0,0,-6,-13,7,-21,-9,-10,-35,-19,4,11,-9,2,10,10,14,-24,5,-13,-41,-10,-3,2,-16,-5,-12,-21, -6,-13,-10,-7,7,31,8,1,-4,12,-6,17,51,-7,8,-12,10,6,37,6,-2,11,13,-7,2,4,-4,8,-6,-8,12,17,-3,-12,-8,11,2,7,9,-7,6,16,21,12,7,-5,22,23,-11,-12,7,13,36,7,-7,-6,20,22,-8,3,27,14,6,9,27,11,4,3,14,-16,0,9,-33,0,-7,-12,9,19,-8,26, 
  /* [7][0][][] */ -5,-9,-4,8,8,4,-5,6,-3,7,-12,10,35,15,0,2,-9,2,41,-25,12,-2,13,14,2,-26,-9,-13,12,12,-46,-37,7,-10,-4,-8,-16,-32,7,5,0,-25,-17,9,-14,1,-4,4,11,-2,-5,-2,-1,-6,9,-15,12,-17,4,-13,-18,2,14,-11,23,47,9,-5,48,48,6,1,37,31,-15,-13,8,36,6,14, -13,-13,-12,-6,44,17,10,11,-12,2,-15,12,8,7,-7,7,-1,1,5,-47,2,13,-3,-4,-49,-62,12,8,-14,6,-82,-85,-9,-2,2,7,-93,-40,0,11,3,-34,-19,2,-15,14,-30,-46,-2,11,-7,-33,-20,15,-5,6,-31,-18,-8,0,-9,-13,0,6,-25,-28,-2,-10,-16,-56,-2,9,-59,-11,-11,4,-20,21,2,0, -14,-1,4,9,0,17,-8,-15,-9,10,10,-3,60,7,-9,-14,12,-5,47,18,-5,4,-9,15,21,-41,-6,-11,4,10,-44,-123,6,6,4,12,-127,-38,-3,12,11,-43,-29,-5,13,-2,-11,-51,13,3,-9,-58,-15,-5,15,10,-30,-45,15,12,-48,-36,-5,-12,-35,-46,-13,-10,-21,-28,-15,0,-19,-12,-13,-11,5,5,-12,30, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,80 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0017049243906512856, 0.0065621770918369293, 0.007758445106446743, 0.0070151477120816708, 0.0023158269468694925, 0.0067652612924575806, 0.010973456315696239, 0.009835180826485157, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -18587, 13953, 32971, 11032, -22713, 12640, 10978, 23150, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 3.7347456327552209e-06, 1.4374867532751523e-05, 1.6995369151118211e-05, 1.5367128071375191e-05, 5.0729668146232143e-06, 1.4819736861682031e-05, 2.403805592621211e-05, 2.154459070879966e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -20,-61,16,-20,-18,-84,127,-24, 27,-24,-81,-82,-23,-59,-117,-12, 23,-69,91,-32,9,-99,-52,73, 
  /* [1][0][][] */ -11,39,12,-91,7,-77,35,25, -12,-105,1,-91,-4,-127,-23,21, 10,25,33,-18,14,-99,-19,20, 
  /* [2][0][][] */ -22,-58,-80,71,-14,50,-63,-89, 26,-87,-69,60,6,-6,-127,-110, -7,-57,-42,-20,4,47,-88,-71, 
  /* [3][0][][] */ -18,7,44,-82,5,-83,-11,50, -14,-115,19,-122,28,-118,29,5, -2,-102,41,-126,2,-127,26,7, 
  /* [4][0][][] */ -4,23,11,-39,17,-70,-127,35, -17,-73,27,-50,-2,-58,10,29, 16,-63,14,-3,-16,-75,-59,65, 
  /* [5][0][][] */ 16,-9,-45,51,11,127,-11,-15, -11,-18,-74,46,-3,104,-21,-28, -6,-21,-3,17,10,75,-26,-35, 
  /* [6][0][][] */ 25,-18,-34,38,-3,6,-40,-19, 16,-51,-51,8,-11,127,-54,-82, -14,-67,-31,10,14,56,-63,-54, 
  /* [7][0][][] */ -14,-5,-12,73,-13,127,-9,0, 7,-9,-21,83,17,93,2,-7, -17,-5,-8,92,-2,127,-4,-14, 
  /* [8][0][][] */ -13,-89,55,-80,-3,-91,20,42, -3,5,31,-62,20,-111,-21,33, 3,-93,34,-127,3,-127,32,26, 
  /* [9][0][][] */ -9,-119,44,-127,21,-103,-97,11, -4,45,58,-72,14,-78,39,-19, -20,28,44,-75,9,-113,18,33, 
  /* [10][0][][] */ -3,-8,11,-36,7,-127,-55,-12, 20,38,13,-58,25,-64,40,-22, -7,32,-12,-68,0,-99,32,-10, 
  /* [11][0][][] */ 6,-71,12,-57,3,-84,26,-3, -6,46,49,-52,-1,-127,-18,34, 11,-66,3,-57,23,-114,32,-32, 
  /* [12][0][][] */ 14,-1,-2,-47,19,-70,3,-45, -12,-17,44,-63,21,-127,37,58, -6,33,-46,-108,2,-94,44,7, 
  /* [13][0][][] */ -3,-15,-23,60,-32,77,-11,-17, -15,-11,-20,20,12,104,-12,-40, 2,-10,-28,53,-14,127,-14,-34, 
  /* [14][0][][] */ 3,6,-22,29,-26,127,-17,-25, 11,-1,-48,23,16,59,-7,-16, -10,3,-11,23,-9,74,-15,-21, 
  /* [15][0][][] */ 29,-25,-34,72,-28,-60,-19,6, -2,-3,-55,-4,19,116,32,-64, 22,-19,-33,31,-21,127,-7,-32, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0066430084407329559, 0.015591257251799107, 0.0083259949460625648, 0.010085633955895901, 0.013365703634917736, 0.011442194692790508, 0.0096434187144041061, 0.01270535122603178, 0.013190874829888344, 0.012807579711079597, 0.011881770566105843, 0.014059115201234818, 0.010225226171314716, 0.012493380345404148, 0.012379667721688747, 0.0089106578379869461, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -1104, -114, 3005, -752, -682, 1138, 2052, -895, -349, -234, -1963, -179, -814, 375, -1674, 1016, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 5.876068098586984e-05, 0.00013791234232485294, 7.364752673311159e-05, 8.9212400780525059e-05, 0.00011822622764157131, 0.00010121184459421784, 8.5300787759479135e-05, 0.00011238508886890486, 0.00011667978105833754, 0.00011328934488119557, 0.00010510010906727985, 0.00012435979442670941, 9.0447159891482443e-05, 0.00011051009641960263, 0.00010950425348710269, 7.8819153713993728e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[2*400] = { 
  48, 16, 88, -26, 11, 91, 75, 115, -45, -10, 11, -9, 7, 127, 32, 51, -46, -35, 46, -11, -27, 29, -21, 79, -36, -22, 49, 11, 48, 49, 29, 3, 60, 17, 0, -11, -38, 3, 53, 37, -24, -34, 0, 19, 23, 26, 15, 22, -1, -34, 22, 12, -10, 59, 10, 76, -14, -49, 15, -35, -12, 31, 24, -7, -33, -17, 1, -4, 1, -27, 9, 67, -11, -23, 23, -12, 48, 63, 19, 1, -5, -21, 53, -31, -70, 15, 53, 46, -46, -21, 5, -13, -18, 23, 67, 43, -25, -37, 54, -12, -23, 48, 30, 23, -17, -43, -13, -29, 5, 38, -6, -59, -8, 19, 56, 20, 0, 60, 74, 55, -6, -52, -25, -21, -42, 61, 57, 13, -8, -52, 93, -13, -34, 32, 60, 36, 1, -19, 27, -27, -8, 65, 22, 40, 5, -18, -3, -4, 17, 2, -11, 42, 2, 0, 27, 36, 40, 40, 27, -15, 39, 10, -11, -8, 17, 45, -4, 80, -16, -24, 3, 0, 7, 56, 54, -10, -14, -42, 11, 6, -15, 31, 33, 37, -24, 28, -9, -16, 6, 52, 60, -10, -30, -22, 15, -5, -1, 36, 40, 103, 17, -14, -13, -55, 17, 88, 12, 13, -11, -56, 44, -12, -12, 75, 41, 78, -7, -13, 2, -30, 22, 34, 39, -16, -8, 12, 50, -19, -6, 29, 37, 12, 9, -4, 5, 4, 10, -6, 16, 3, 7, 3, 97, -14, 1, 44, 71, 23, -24, -6, -32, -34, -30, 55, 22, 25, 7, 0, 30, 13, 14, 25, 1, 51, -16, -32, -47, -9, 5, 30, 7, -20, -9, -11, 99, -22, 9, -1, 54, 3, -36, -13, 14, -44, -17, 17, -28, 20, 33, -28, 77, -38, -13, 24, 29, 68, -39, -12, 2, -20, -33, 69, 49, 19, 8, -25, 27, -18, -15, 17, 8, 85, -19, -20, -21, -33, -31, 29, 18, 2, -54, -11, 64, -21, -44, 56, 56, 72, -7, -76, -74, 11, -43, 68, 32, -8, -15, -12, 49, -38, -38, 36, 22, 66, -28, -15, 7, 11, -12, 21, 10, -12, 5, -30, 45, 9, -44, 4, 7, 53, -19, 11, 54, -7, 26, 44, 24, 36, 31, -34, 73, -22, -26, 68, 38, 68, -21, -36, -3, -25, -9, 62, 63, 8, 27, 2, 19, 3, 4, 78, 47, 66, -24, -58, -14, -12, 17, 91, 81, 18, 
  -45, -37, -90, 26, -2, -93, -65, -108, 48, 14, -11, 12, -7, -126, -36, -63, 54, 28, -33, 13, 22, -26, 15, -82, 20, 16, -30, -18, -46, -44, -25, 10, -61, -14, 2, 2, 39, -15, -45, -40, 12, 42, 5, -5, -29, -37, -7, -16, 9, 35, -15, -3, 11, -59, -14, -65, 21, 35, -3, 34, 13, -47, -23, 14, 26, 23, -5, -17, -3, 17, -1, -59, 10, 6, -31, 13, -54, -58, -28, -6, -4, 25, -41, 22, 63, -22, -39, -52, 36, 6, -7, -2, 14, -18, -65, -43, 31, 49, -36, 14, 22, -48, -14, -24, 27, 46, 12, 32, -19, -43, 9, 59, 13, -26, -54, -22, -8, -77, -74, -49, 16, 53, 28, 31, 38, -67, -52, -14, 6, 52, -90, 25, 40, -38, -61, -30, 16, 19, -15, 33, 8, -53, -22, -40, -3, 8, 12, 19, -8, -6, 10, -48, 11, 4, -16, -33, -34, -44, -19, -1, -39, -2, 25, 15, -12, -48, 3, -67, -2, 10, 9, -6, -24, -49, -37, 1, 24, 52, -10, 3, -1, -36, -21, -36, 4, -13, 10, 23, -8, -48, -67, 10, 31, 23, -24, -6, 16, -43, -38, -107, -3, 6, 16, 62, -12, -87, -10, -4, 26, 48, -33, 9, 7, -86, -39, -75, -11, 19, -7, 23, -16, -37, -47, 16, 14, -13, -42, 29, 24, -16, -33, -20, -8, 18, -7, -11, -7, -11, -3, 8, -17, 0, -91, 27, -10, -43, -84, -24, 24, 21, 37, 23, 32, -53, -18, -30, 11, 3, -14, -6, -19, -5, 10, -55, 8, 34, 29, 4, -2, -38, 6, 21, 12, 10, -116, 20, -27, 0, -43, -2, 22, 9, -8, 39, 13, -25, 29, -22, -29, 27, -72, 41, -2, -31, -38, -64, 28, 16, 18, 24, 35, -84, -50, -2, -25, 30, -29, 5, 9, -22, 10, -91, 14, 10, 30, 31, 49, -27, -39, 1, 48, 31, -68, 16, 51, -55, -70, -61, -3, 70, 71, -20, 42, -54, -47, 5, 14, 2, -53, 50, 31, -28, -24, -56, 21, 3, 5, 10, 12, -37, -19, 9, 10, 47, -38, -22, 38, -5, -13, -53, 14, -9, -43, 16, -37, -39, -15, -37, -16, 14, -75, 17, 24, -71, -34, -68, 25, 27, 1, 27, 10, -76, -45, -2, -26, -1, -10, -1, 1, -62, -47, -69, 41, 53, 17, 24, 1, -86, -78, -4, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 2,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.011056726798415184, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[2] = { 27, -27, };
const TfArray<1, int> tensor_dimension11 = { 1, { 2 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00046549903345294297, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,100,80 } };
const TfArray<1, float> quant12_scale = { 1, { 0.002190563827753067, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,100,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0088454922661185265, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,100,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0088454922661185265, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0088454922661185265, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0088454922661185265, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.042100980877876282, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.042100980877876282, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.042100980877876282, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.042100980877876282, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 1.6430184841156006, } };
const TfArray<1, int> quant21_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8000, (TfLiteIntArray*)&tensor_dimension0, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8960, (TfLiteIntArray*)&tensor_dimension13, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
